1. Импорты и инициализация:

import pygame
from pygame.locals import *
import sys
import time
import random

    pygame: Импортирует библиотеку Pygame, которая используется для разработки игр. Она предоставляет множество инструментов для работы с графикой, звуком и вводом.

    pygame.locals import *: Это позволяет использовать常ые константы и события, такие как QUIT, KEYDOWN и другие, без необходимости писать pygame.QUIT.

    sys: Импортирует модуль sys, который используется для работы с системными параметрами, такими как завершение работы программы (например, sys.exit()).

    time: Импортирует модуль time, который используется для работы со временем, например, для измерения времени игры.

    random: Импортирует модуль random, который позволяет генерировать случайные числа. Мы используем его для выбора случайной строки из файла с предложениями.

2. Класс Game:

class Game:

Это начало определения класса Game. В этом классе будет реализована вся логика игры.
2.1. Метод __init__:

def __init__(self):

Этот метод — конструктор класса, который вызывается при создании нового объекта Game. В нем мы инициализируем все важные переменные и настраиваем игровые элементы.

self.w, self.h = 750, 500
self.reset = True
self.active = False
self.timer_started = False
self.input_text = ''
self.word = ''
self.time_start = 0
self.total_time = 0
self.accuracy = 0
self.results = 'Time: 0  Accuracy: 0%  WPM: 0'
self.wpm = 0
self.end = False

    self.w, self.h: Заданы размеры окна игры (750x500 пикселей).

    self.reset: Флаг, указывающий, нужно ли сбросить игру.

    self.active: Флаг, который указывает, активен ли текстовый ввод.

    self.timer_started: Флаг, показывающий, был ли начат таймер (когда игрок начинает вводить текст).

    self.input_text: Хранит текст, который пользователь вводит.

    self.word: Хранит строку (предложение), которое нужно напечатать.

    self.time_start: Время начала игры (таймер).

    self.total_time: Общее время, прошедшее с начала игры.

    self.accuracy: Точность ввода.

    self.results: Результаты игры (время, точность, WPM).

    self.wpm: Количество слов в минуту.

    self.end: Флаг, который указывает, завершена ли игра.

Далее мы инициализируем графические элементы и настройки игры:

pygame.init()
self.open_img = pygame.image.load('type-speed.png')
self.open_img = pygame.transform.scale(self.open_img, (self.w, self.h))

self.bg = pygame.image.load('background.jpg')
self.bg = pygame.transform.scale(self.bg, (self.w, self.h))

self.screen = pygame.display.set_mode((self.w, self.h))
pygame.display.set_caption('Typing Speed Test')

    pygame.init(): Инициализирует все модули Pygame.

    Загружаются изображения для фона игры и начального экрана:

        self.open_img: Изображение, которое будет отображаться при запуске игры.

        self.bg: Фоновое изображение.

    self.screen: Устанавливается окно игры с размерами 750x500.

    pygame.display.set_caption(): Устанавливает название окна игры.

2.2. Метод draw_text:

def draw_text(self, screen, msg, y, fsize, color):
    font = pygame.font.Font(None, fsize)
    lines = msg.split('\n')  # Разбиваем текст на несколько строк по символу новой строки
    line_height = fsize + 5  # Расстояние между строками
    for i, line in enumerate(lines):
        text = font.render(line, True, color)
        text_rect = text.get_rect(center=(self.w / 2, y + i * line_height))  # Сдвигаем по вертикали для каждой строки
        screen.blit(text, text_rect)

Этот метод рисует текст на экране:

    Разбивает строку на несколько строк с использованием \n (символ новой строки).

    Затем рисует каждую строку текста с небольшим вертикальным сдвигом, чтобы строки не перекрывались.

    font.render() рисует текст, а screen.blit() отрисовывает его на экране.

2.3. Метод get_sentence:

def get_sentence(self):
    try:
        with open('sentences.txt', 'r') as f:
            sentences = f.read().split('\n')
            sentences = [s.strip() for s in sentences if s.strip()]
            return random.choice(sentences) if sentences else "Type this default sentence."
    except FileNotFoundError:
        return "Sentence file not found."

Этот метод загружает предложения из файла sentences.txt. Он:

    Открывает файл и читает его строки.

    Разбивает файл на отдельные строки и выбирает случайную строку для отображения в игре.

    Если файл не найден, возвращает сообщение об ошибке.

2.4. Метод show_results:

def show_results(self, screen):
    if not self.end:
        self.total_time = time.time() - self.time_start

        correct_chars = sum(1 for i, c in enumerate(self.word)
                            if i < len(self.input_text) and self.input_text[i] == c)
        self.accuracy = (correct_chars / len(self.word)) * 100 if self.word else 0

        self.wpm = len(self.input_text) * 60 / (5 * self.total_time) if self.total_time > 0 else 0
        self.end = True

        self.results = f'Time: {round(self.total_time)} sec   Accuracy: {round(self.accuracy)}%   WPM: {round(self.wpm)}'

        self.time_img = pygame.image.load('icon.png')
        self.time_img = pygame.transform.scale(self.time_img, (150, 150))
        screen.blit(self.time_img, (self.w / 2 - 75, self.h - 140))

        pygame.draw.rect(screen, (200, 200, 200), (310, 390, 130, 40), 2)
        self.draw_text(screen, "Reset", self.h - 70, 26, (100, 100, 100))
        self.draw_text(screen, self.results, 350, 28, self.RESULT_C)
        pygame.display.update()

Этот метод показывает результаты игры:

    Рассчитывает время, точность ввода и WPM (слова в минуту).

    Выводит результаты на экран и рисует кнопку для сброса игры.

    Если игра завершена, отображает итоговую информацию.

2.5. Метод reset_game:

def reset_game(self):
    self.screen.blit(self.open_img, (0, 0))
    pygame.display.update()
    time.sleep(1)

    self.reset = False
    self.end = False
    self.active = False
    self.timer_started = False
    self.input_text = ''
    self.word = ''
    self.time_start = 0
    self.total_time = 0
    self.wpm = 0

    self.word = self.get_sentence()
    if not self.word:
        self.reset_game()
        return

    self.screen.fill((0, 0, 0))
    self.screen.blit(self.bg, (0, 0))
    self.draw_text(self.screen, "Typing Speed Test\nPress ENTER to finish", 80, 80, self.HEAD_C)

    pygame.draw.rect(self.screen, (255, 192, 25), (50, 250, 650, 50), 2)
    self.draw_text(self.screen, self.word, 200, 28, self.TEXT_C)

    pygame.display.update()

Метод сброса игры:

    Отображает начальный экран.

    Сбрасывает все параметры игры, готовит новое предложение для ввода.

    Отображает текст и предложение для ввода на экране.

2.6. Метод run:

def run(self):
    self.reset_game()
    clock = pygame.time.Clock()
    self.running = True

    while self.running:
        self.screen.fill((0, 0, 0), (50, 250, 650, 50))
        pygame.draw.rect(self.screen, self.HEAD_C, (50, 250, 650, 50), 2)
        self.draw_text(self.screen, self.input_text, 274, 26, (250, 250, 250))
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == QUIT:
                self.running = False
                pygame.quit()
                sys.exit()

            elif event.type == pygame.MOUSEBUTTONUP:
                x, y = pygame.mouse.get_pos()
                if 50 <= x <= 650 and 250 <= y <= 300:
                    if not self.timer_started

